// Generated by view binder compiler. Do not edit!
package com.talor.fields.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.talor.fields.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class PopupLayoutBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final TextView mapLBLParkName;

  @NonNull
  public final MaterialButton popupBTNGoto;

  @NonNull
  public final TextView popupLBLOnline;

  @NonNull
  public final TextView popupLBLRateUsers;

  @NonNull
  public final TextView popupLBLRating;

  @NonNull
  public final LinearLayout registerLL;

  @NonNull
  public final TextView titleRegistered;

  private PopupLayoutBinding(@NonNull MaterialCardView rootView, @NonNull TextView mapLBLParkName,
      @NonNull MaterialButton popupBTNGoto, @NonNull TextView popupLBLOnline,
      @NonNull TextView popupLBLRateUsers, @NonNull TextView popupLBLRating,
      @NonNull LinearLayout registerLL, @NonNull TextView titleRegistered) {
    this.rootView = rootView;
    this.mapLBLParkName = mapLBLParkName;
    this.popupBTNGoto = popupBTNGoto;
    this.popupLBLOnline = popupLBLOnline;
    this.popupLBLRateUsers = popupLBLRateUsers;
    this.popupLBLRating = popupLBLRating;
    this.registerLL = registerLL;
    this.titleRegistered = titleRegistered;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static PopupLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PopupLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.popup_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PopupLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.map_LBL_park_name;
      TextView mapLBLParkName = ViewBindings.findChildViewById(rootView, id);
      if (mapLBLParkName == null) {
        break missingId;
      }

      id = R.id.popup_BTN_goto;
      MaterialButton popupBTNGoto = ViewBindings.findChildViewById(rootView, id);
      if (popupBTNGoto == null) {
        break missingId;
      }

      id = R.id.popup_LBL_online;
      TextView popupLBLOnline = ViewBindings.findChildViewById(rootView, id);
      if (popupLBLOnline == null) {
        break missingId;
      }

      id = R.id.popup_LBL_rate_users;
      TextView popupLBLRateUsers = ViewBindings.findChildViewById(rootView, id);
      if (popupLBLRateUsers == null) {
        break missingId;
      }

      id = R.id.popup_LBL_rating;
      TextView popupLBLRating = ViewBindings.findChildViewById(rootView, id);
      if (popupLBLRating == null) {
        break missingId;
      }

      id = R.id.register_LL;
      LinearLayout registerLL = ViewBindings.findChildViewById(rootView, id);
      if (registerLL == null) {
        break missingId;
      }

      id = R.id.title_registered;
      TextView titleRegistered = ViewBindings.findChildViewById(rootView, id);
      if (titleRegistered == null) {
        break missingId;
      }

      return new PopupLayoutBinding((MaterialCardView) rootView, mapLBLParkName, popupBTNGoto,
          popupLBLOnline, popupLBLRateUsers, popupLBLRating, registerLL, titleRegistered);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
